from dotenv import load_dotenv

load_dotenv()  # load all the environment variables

import streamlit as st
import os
import sqlite3

import google.generativeai as genai

# Configure our api key
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))


# Function to load Google Gemini Model and provide query as response
def get_gemini_response(question, prompt):
    model = genai.GenerativeModel('gemini-pro')
    query_response = model.generate_content([prompt[0], question])
    return query_response.parts[0].text


# Function to retrieve query from the sql database
def read_sql_query(sql, db):
    conn = sqlite3.connect(db)
    cur = conn.cursor()
    cur.execute(sql)
    rows = cur.fetchall()
    conn.commit()
    conn.close()
    for row in rows:
        print(row)
    return rows


# Define the prompt
prompt = [
    """
    You are an expert in converting English questions to SQL query!
    The SQL database has the name EmployeeManagement 
    \n\nFor example,\nExample 1 - What is the total number of employees in the "Employees" table?, 
    the SQL command will be something like this SELECT COUNT(*) AS TotalEmployees FROM Employees; ;
    \nExample 2 - Tell the names of all employees who have a salary greater than $50,000?, 
    the SQL command will be something like this SELECT FirstName, LastName FROM Employees 
    WHERE Salary > 50000.00; 
    also the sql code should not have ``` in beginning or end and sql word in output
    \nExample 3 - List the departments along with the number of employees in each department?
    the SQL command will be something like this SELECT d.DepartmentName, COUNT(e.EmployeeID) AS 
    NumberOfEmployees FROM Departments d LEFT JOIN Employees e ON d.DepartmentID = e.DepartmentID
    GROUP BY d.DepartmentName;
    \nExample 4 - Find the average salary of employees in the "Sales" department?
    the SQL command will be something like this SELECT AVG(e.Salary) AS AverageSalary
    FROM Employees e JOIN Departments d ON e.DepartmentID = d.DepartmentID
    WHERE d.DepartmentName = 'Sales';
    \nExample 5 - Identify the employee with the highest salary?
    the SQL command will be something like this SELECT * FROM Employees WHERE 
    Salary = (SELECT MAX(Salary) FROM Employees);
    \nExample 6 - List the employees who joined the company in the year 2022?
    the SQL command will be something like this SELECT *
    FROM Employees WHERE strftime('%Y', JoinDate) = '2022';
    \nExample 7 - Determine the number of employees who have been with the company for 
    more than 5 years?
    the SQL command will be something like this SELECT COUNT(*) AS NumberOfEmployees
    FROM Employees WHERE DATEDIFF(CURDATE(), JoinDate) > 5 * 365;
    \nExample 8 - Calculate the total revenue generated by each product category?
    the SQL command will be something like this SELECT p.Category, SUM(s.Quantity * p.Price) 
    AS TotalRevenue FROM Products p JOIN Sales s ON p.ProductID = s.ProductID GROUP BY p.Category;
    \nExample 9 - Find the top 5 best-selling products?
    the SQL command will be something like this SELECT p.ProductID, p.ProductName, p.Category, 
    SUM(s.Quantity) AS TotalQuantitySold FROM Products p JOIN Sales s ON p.ProductID = s.ProductID
    GROUP BY p.ProductID, p.ProductName, p.Category ORDER BY TotalQuantitySold DESC LIMIT 5;
    \nExample 10 - List the employees who have not been assigned to any department?
    the SQL command will be something like this SELECT e.EmployeeID, e.FirstName, e.LastName
    FROM Employees e LEFT JOIN Departments d ON e.DepartmentID = d.DepartmentID WHERE 
    d.DepartmentID IS NULL;
    """
]

# StreamLit App

st.set_page_config(page_title="I can Retrieve Any SQL query")
st.header("Gemini App To Retrieve SQL Data")

question = st.text_input("Input: ", key="input")

submit = st.button("Ask the question")

# if submit is clicked
if submit:
    response = get_gemini_response(question, prompt)
    print(response)
    #print(response.parts[0])
    response = read_sql_query(response, "EmployeeManagement.db")
    sub_header_text = "The Response to: " + question
    st.subheader(sub_header_text)
    for row in response:
        print(row)
        st.header(row)
